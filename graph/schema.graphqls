# GraphQL schema example
#
# https://gqlgen.com/getting-started/

# directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

# new directive
directive @auth on FIELD_DEFINITION

type Organization {
  id: ID!
  name: String!
  email: String!
}

type Instructor {
  id: ID!
  name: String!
  organizationId: String!
}

type Time {
  id: ID!
  groupId: ID!
  day: String! # Changed from DayOfWeek!
  start_hour: String!
  finish_hour: String!
}

type Group {
  id: ID!
  name: String!
  instructor: Instructor!
  times: [Time!]!
}

type Customer {
  id: ID!
  name: String!
  phoneNumber: String!
  groups: [Group!]!
  lastPayment: String!
  nextPayment: String!
  active: Boolean
}

enum PaymentType {
  credit_card
  cash
}

enum Currency {
  try
  usd
  eur
}

type Payment {
  id: ID!
  amount: Int!
  date: String!
  customer: Customer!
  paymentType: PaymentType!
  currency: Currency!
}

type TokenResponse {
  accessToken: String!
  # refreshToken: String!
}

type Query {
  # Organization
  getOrganization: Organization! @auth

  # Group
  getGroup(id: ID!): Group! @auth
  listGroupsByOrganization(offset: Int = 0, limit: Int = 10): [Group!]! @auth

  # Instructor
  getInstructor(id: ID!): Instructor! @auth
  listInstructors(offset: Int = 0, limit: Int = 10): [Instructor!]! @auth
  listInstructorsByOrganization(
    offset: Int = 0
    limit: Int = 10
  ): [Instructor!]! @auth

  # Customer
  getCustomer(id: ID!): Customer! @auth
  listCustomersByGroup(
    groupId: ID!
    offset: Int = 0
    limit: Int = 10
  ): [Customer!]! @auth
  listCustomersByOrganization(offset: Int = 0, limit: Int = 10): [Customer!]!
    @auth

  #Payment
  getPayment(id: ID!): Payment! @auth
  listPaymentsByOrganization(offset: Int = 0, limit: Int = 10): [Payment!]!
    @auth
  listPaymentsByGroup(
    groupId: ID!
    offset: Int = 0
    limit: Int = 10
  ): [Payment!]! @auth
  listPaymentsByCustomer(
    customerId: ID!
    offset: Int = 0
    limit: Int = 10
  ): [Payment!]! @auth
}

type Mutation {
  #Login
  login(email: String!, password: String!): TokenResponse!

  # Organization
  createOrganization(input: CreateOrganizationInput!): Organization!
  updateOrganization(input: UpdateOrganizationInput!): String! @auth
  deleteOrganization: Boolean! @auth

  # Group
  createGroup(input: CreateGroupInput!): Group! @auth
  updateGroup(id: ID!, input: UpdateGroupInput!): String! @auth
  deleteGroup(id: ID!): Boolean! @auth

  # Instructor
  createInstructor(input: CreateInstructorInput!): Instructor! @auth
  updateInstructor(id: ID!, input: UpdateInstructorInput!): String! @auth
  deleteInstructor(id: ID!): Boolean! @auth

  # Customer
  createCustomer(input: CreateCustomerInput!): Customer! @auth
  updateCustomer(id: ID!, input: UpdateCustomerInput!): String! @auth
  deleteCustomer(id: ID!): Boolean! @auth

  #Payment
  createPayment(input: CreatePaymentInput!): Payment! @auth
  updatePayment(id: ID!, input: UpdatePaymentInput!): String! @auth
  deletePayment(id: ID!): Boolean! @auth

  # Time
  createTime(groupId: String!, input: CreateTimeInput!): Time! @auth
  updateTime(id: ID!, input: UpdateTimeInput!): String! @auth
  deleteTime(id: ID!): Boolean! @auth
}

# Input for Organization
input CreateOrganizationInput {
  name: String!
  email: String!
  password: String!
}

input UpdateOrganizationInput {
  name: String
  email: String
  password: String
}

# Input for Group
input CreateGroupInput {
  name: String!
  instructor: ID!
  times: [CreateTimeInput!]!
}

input UpdateGroupInput {
  name: String
  instructor: ID
  times: [UpdateTimeInput!]
}

# Input for Instructor
input CreateInstructorInput {
  name: String!
}

input UpdateInstructorInput {
  name: String
}

# Input for Customer
input CreateCustomerInput {
  name: String!
  phoneNumber: String!
  groups: [ID!]!
  lastPayment: String!
  nextPayment: String!
}

input UpdateCustomerInput {
  name: String
  phoneNumber: String
  groups: [ID]
  lastPayment: String
  nextPayment: String
  active: Boolean
}

# Input for Payment

input CreatePaymentInput {
  amount: Int!
  date: String!
  customerId: ID!
  paymentType: PaymentType!
  currency: Currency!
}

input UpdatePaymentInput {
  amount: Int
  date: String
  paymentType: PaymentType
  currency: Currency
}

#Input for time

input CreateTimeInput {
  day: String!
  start_hour: String!
  finish_hour: String!
}

input UpdateTimeInput {
  id: ID!
  day: String
  start_hour: String
  finish_hour: String
}
