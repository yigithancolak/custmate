// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CreateCustomerInput struct {
	Name         string    `json:"name"`
	Organization string    `json:"organization"`
	Groups       []*string `json:"groups,omitempty"`
	LastPayment  string    `json:"lastPayment"`
	NextPayment  string    `json:"nextPayment"`
}

type CreateGroupInput struct {
	Name         string   `json:"name"`
	Organization string   `json:"organization"`
	Instructor   string   `json:"instructor"`
	Times        []string `json:"times"`
}

type CreateInstructorInput struct {
	Name         string `json:"name"`
	Organization string `json:"organization"`
}

type CreateOrganizationInput struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type CreatePaymentInput struct {
	Amount         float64 `json:"amount"`
	Date           string  `json:"date"`
	OrganizationID string  `json:"organizationId"`
	GroupID        string  `json:"groupId"`
	CustomerID     string  `json:"customerId"`
}

type Customer struct {
	ID           string        `json:"id"`
	Name         string        `json:"name"`
	Organization *Organization `json:"organization"`
	Groups       []*Group      `json:"groups"`
	LastPayment  string        `json:"lastPayment"`
	NextPayment  string        `json:"nextPayment"`
}

type Group struct {
	ID           string        `json:"id"`
	Name         string        `json:"name"`
	Organization *Organization `json:"organization"`
	Instructor   *Instructor   `json:"instructor"`
	Times        []*Time       `json:"times"`
}

type Instructor struct {
	ID           string        `json:"id"`
	Name         string        `json:"name"`
	Organization *Organization `json:"organization"`
}

type Organization struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

type Payment struct {
	ID           string        `json:"id"`
	Amount       float64       `json:"amount"`
	Date         string        `json:"date"`
	Customer     *Customer     `json:"customer"`
	Organization *Organization `json:"organization"`
	Group        *Group        `json:"group"`
}

type Time struct {
	ID         string    `json:"id"`
	Day        DayOfWeek `json:"day"`
	StartHour  string    `json:"start_hour"`
	FinishHour string    `json:"finish_hour"`
}

type TokenResponse struct {
	AccessToken string `json:"accessToken"`
}

type UpdateCustomerInput struct {
	Name         *string   `json:"name,omitempty"`
	Organization *string   `json:"organization,omitempty"`
	Groups       []*string `json:"groups,omitempty"`
	LastPayment  *string   `json:"lastPayment,omitempty"`
	NextPayment  *string   `json:"nextPayment,omitempty"`
}

type UpdateGroupInput struct {
	Name         *string  `json:"name,omitempty"`
	Organization *string  `json:"organization,omitempty"`
	Instructor   *string  `json:"instructor,omitempty"`
	Times        []string `json:"times,omitempty"`
}

type UpdateInstructorInput struct {
	Name         *string `json:"name,omitempty"`
	Organization *string `json:"organization,omitempty"`
}

type UpdateOrganizationInput struct {
	Name     *string `json:"name,omitempty"`
	Email    *string `json:"email,omitempty"`
	Password *string `json:"password,omitempty"`
}

type UpdatePaymentInput struct {
	Amount         *float64 `json:"amount,omitempty"`
	Date           *string  `json:"date,omitempty"`
	OrganizationID *string  `json:"organizationId,omitempty"`
	GroupID        *string  `json:"groupId,omitempty"`
	CustomerID     *string  `json:"customerId,omitempty"`
}

type DayOfWeek string

const (
	DayOfWeekMonday    DayOfWeek = "monday"
	DayOfWeekTuesday   DayOfWeek = "tuesday"
	DayOfWeekWednesday DayOfWeek = "wednesday"
	DayOfWeekThursday  DayOfWeek = "thursday"
	DayOfWeekFriday    DayOfWeek = "friday"
	DayOfWeekSaturday  DayOfWeek = "saturday"
	DayOfWeekSunday    DayOfWeek = "sunday"
)

var AllDayOfWeek = []DayOfWeek{
	DayOfWeekMonday,
	DayOfWeekTuesday,
	DayOfWeekWednesday,
	DayOfWeekThursday,
	DayOfWeekFriday,
	DayOfWeekSaturday,
	DayOfWeekSunday,
}

func (e DayOfWeek) IsValid() bool {
	switch e {
	case DayOfWeekMonday, DayOfWeekTuesday, DayOfWeekWednesday, DayOfWeekThursday, DayOfWeekFriday, DayOfWeekSaturday, DayOfWeekSunday:
		return true
	}
	return false
}

func (e DayOfWeek) String() string {
	return string(e)
}

func (e *DayOfWeek) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DayOfWeek(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DayOfWeek", str)
	}
	return nil
}

func (e DayOfWeek) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
