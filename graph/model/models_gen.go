// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CreateCustomerInput struct {
	Name        string   `json:"name"`
	PhoneNumber string   `json:"phoneNumber"`
	Groups      []string `json:"groups"`
	LastPayment string   `json:"lastPayment"`
	NextPayment string   `json:"nextPayment"`
}

type CreateGroupInput struct {
	Name       string             `json:"name"`
	Instructor string             `json:"instructor"`
	Times      []*CreateTimeInput `json:"times"`
}

type CreateInstructorInput struct {
	Name string `json:"name"`
}

type CreateOrganizationInput struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type CreatePaymentInput struct {
	Amount          int         `json:"amount"`
	Date            string      `json:"date"`
	NextPaymentDate string      `json:"nextPaymentDate"`
	PaymentType     PaymentType `json:"paymentType"`
	Currency        Currency    `json:"currency"`
	CustomerID      string      `json:"customerId"`
	GroupID         string      `json:"groupId"`
}

type CreateTimeInput struct {
	Day        string `json:"day"`
	StartHour  string `json:"start_hour"`
	FinishHour string `json:"finish_hour"`
}

type Customer struct {
	ID          string   `json:"id"`
	Name        string   `json:"name"`
	PhoneNumber string   `json:"phoneNumber"`
	Groups      []*Group `json:"groups"`
	LastPayment string   `json:"lastPayment"`
	NextPayment string   `json:"nextPayment"`
	Active      *bool    `json:"active,omitempty"`
}

type Group struct {
	ID         string      `json:"id"`
	Name       string      `json:"name"`
	Instructor *Instructor `json:"instructor,omitempty"`
	Times      []*Time     `json:"times,omitempty"`
	Customers  []*Customer `json:"customers,omitempty"`
}

type Instructor struct {
	ID             string   `json:"id"`
	Name           string   `json:"name"`
	OrganizationID string   `json:"organizationId"`
	Groups         []*Group `json:"groups,omitempty"`
}

type ListCustomersResponse struct {
	Items      []*Customer `json:"items"`
	TotalCount int         `json:"totalCount"`
}

type Organization struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

type Payment struct {
	ID          string      `json:"id"`
	Amount      int         `json:"amount"`
	Date        string      `json:"date"`
	Customer    *Customer   `json:"customer"`
	PaymentType PaymentType `json:"paymentType"`
	Currency    Currency    `json:"currency"`
}

type SearchCustomerFilter struct {
	Name            *string `json:"name,omitempty"`
	PhoneNumber     *string `json:"phoneNumber,omitempty"`
	Active          *bool   `json:"active,omitempty"`
	LatePayment     *bool   `json:"latePayment,omitempty"`
	UpcomingPayment *bool   `json:"upcomingPayment,omitempty"`
}

type Time struct {
	ID         string `json:"id"`
	GroupID    string `json:"groupId"`
	Day        string `json:"day"`
	StartHour  string `json:"start_hour"`
	FinishHour string `json:"finish_hour"`
}

type TokenResponse struct {
	AccessToken string `json:"accessToken"`
}

type UpdateCustomerInput struct {
	Name        *string   `json:"name,omitempty"`
	PhoneNumber *string   `json:"phoneNumber,omitempty"`
	Groups      []*string `json:"groups,omitempty"`
	LastPayment *string   `json:"lastPayment,omitempty"`
	NextPayment *string   `json:"nextPayment,omitempty"`
	Active      *bool     `json:"active,omitempty"`
}

type UpdateGroupInput struct {
	Name       *string            `json:"name,omitempty"`
	Instructor *string            `json:"instructor,omitempty"`
	Times      []*UpdateTimeInput `json:"times,omitempty"`
}

type UpdateInstructorInput struct {
	Name *string `json:"name,omitempty"`
}

type UpdateOrganizationInput struct {
	Name     *string `json:"name,omitempty"`
	Email    *string `json:"email,omitempty"`
	Password *string `json:"password,omitempty"`
}

type UpdatePaymentInput struct {
	Amount      *int         `json:"amount,omitempty"`
	Date        *string      `json:"date,omitempty"`
	PaymentType *PaymentType `json:"paymentType,omitempty"`
	Currency    *Currency    `json:"currency,omitempty"`
}

type UpdateTimeInput struct {
	ID         string  `json:"id"`
	Day        *string `json:"day,omitempty"`
	StartHour  *string `json:"start_hour,omitempty"`
	FinishHour *string `json:"finish_hour,omitempty"`
}

type Currency string

const (
	CurrencyTry Currency = "try"
	CurrencyUsd Currency = "usd"
	CurrencyEur Currency = "eur"
)

var AllCurrency = []Currency{
	CurrencyTry,
	CurrencyUsd,
	CurrencyEur,
}

func (e Currency) IsValid() bool {
	switch e {
	case CurrencyTry, CurrencyUsd, CurrencyEur:
		return true
	}
	return false
}

func (e Currency) String() string {
	return string(e)
}

func (e *Currency) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Currency(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Currency", str)
	}
	return nil
}

func (e Currency) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentType string

const (
	PaymentTypeCreditCard PaymentType = "credit_card"
	PaymentTypeCash       PaymentType = "cash"
)

var AllPaymentType = []PaymentType{
	PaymentTypeCreditCard,
	PaymentTypeCash,
}

func (e PaymentType) IsValid() bool {
	switch e {
	case PaymentTypeCreditCard, PaymentTypeCash:
		return true
	}
	return false
}

func (e PaymentType) String() string {
	return string(e)
}

func (e *PaymentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentType", str)
	}
	return nil
}

func (e PaymentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
